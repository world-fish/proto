// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: vm.proto

package proto_vm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VMManager_CreateVM_FullMethodName  = "/proto_vm.VMManager/CreateVM"
	VMManager_DestroyVM_FullMethodName = "/proto_vm.VMManager/DestroyVM"
)

// VMManagerClient is the client API for VMManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VMManagerClient interface {
	CreateVM(ctx context.Context, in *CreateVMReq, opts ...grpc.CallOption) (*CreateVMResp, error)
	DestroyVM(ctx context.Context, in *DestroyVMReq, opts ...grpc.CallOption) (*DestroyVMResp, error)
}

type vMManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewVMManagerClient(cc grpc.ClientConnInterface) VMManagerClient {
	return &vMManagerClient{cc}
}

func (c *vMManagerClient) CreateVM(ctx context.Context, in *CreateVMReq, opts ...grpc.CallOption) (*CreateVMResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateVMResp)
	err := c.cc.Invoke(ctx, VMManager_CreateVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMManagerClient) DestroyVM(ctx context.Context, in *DestroyVMReq, opts ...grpc.CallOption) (*DestroyVMResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DestroyVMResp)
	err := c.cc.Invoke(ctx, VMManager_DestroyVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VMManagerServer is the server API for VMManager service.
// All implementations must embed UnimplementedVMManagerServer
// for forward compatibility.
type VMManagerServer interface {
	CreateVM(context.Context, *CreateVMReq) (*CreateVMResp, error)
	DestroyVM(context.Context, *DestroyVMReq) (*DestroyVMResp, error)
	mustEmbedUnimplementedVMManagerServer()
}

// UnimplementedVMManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVMManagerServer struct{}

func (UnimplementedVMManagerServer) CreateVM(context.Context, *CreateVMReq) (*CreateVMResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVM not implemented")
}
func (UnimplementedVMManagerServer) DestroyVM(context.Context, *DestroyVMReq) (*DestroyVMResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyVM not implemented")
}
func (UnimplementedVMManagerServer) mustEmbedUnimplementedVMManagerServer() {}
func (UnimplementedVMManagerServer) testEmbeddedByValue()                   {}

// UnsafeVMManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VMManagerServer will
// result in compilation errors.
type UnsafeVMManagerServer interface {
	mustEmbedUnimplementedVMManagerServer()
}

func RegisterVMManagerServer(s grpc.ServiceRegistrar, srv VMManagerServer) {
	// If the following call pancis, it indicates UnimplementedVMManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VMManager_ServiceDesc, srv)
}

func _VMManager_CreateVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVMReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMManagerServer).CreateVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMManager_CreateVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMManagerServer).CreateVM(ctx, req.(*CreateVMReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMManager_DestroyVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyVMReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMManagerServer).DestroyVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMManager_DestroyVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMManagerServer).DestroyVM(ctx, req.(*DestroyVMReq))
	}
	return interceptor(ctx, in, info, handler)
}

// VMManager_ServiceDesc is the grpc.ServiceDesc for VMManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VMManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto_vm.VMManager",
	HandlerType: (*VMManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVM",
			Handler:    _VMManager_CreateVM_Handler,
		},
		{
			MethodName: "DestroyVM",
			Handler:    _VMManager_DestroyVM_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vm.proto",
}
